# Creating and Using Regexps

You're reading this because you want to use regular expressions when you code.
So this is probably a good time to tell you how to represent and use regular
expressions in your programs.

The good news is that most languages make it easy to use regular expressions.
The bad news is that each language does it differently.

There is however a lot in common across all languages. They all have you
create something representing a regular expression. (In object-oriented
languages, this will be an instance of some kind of `Regular Expression`
class.) You can then call methods to that object to apply it to a string. You
may also, depending on the language, be able to do the opposite and ask a
string object whether it is matched by a regexp.

To see how to represent and use regexps in some common languages, push the
corresponding magnifying glass icon in the list that follows.

+ Ruby (using explicit classes and methods) {{footnote 1}}
+ Ruby (using shortcut syntax) {{footnote 2}}
+ Python {{footnote 3}}
+ Java
+ Javascript

{{#footnote 1}}
Ruby regular expressions are objects of type `Regexp`. These objects support a
rich set of methods. The basic one is `match`, which applies the pattern to a
string and returns either an object describing the match (of type `MatchData`)
or `nil` if there is no match.

```ruby
regexp = Regexp.new("ant")
match = regexp.match("pants")
```
{{/footnote}}

{{#footnote 2}}
Ruby also supports regular expressions directly in the language's syntax.
`/pattern/` is a regular expression literal. It creates a `Regexp` object
(just as `"string"` literals create `String` objects). The `=~` operator
matches a string and a regexp, returning the offset of the match if there is
one, or `nil` otherwise.

```ruby
regexp = Regexp.new("ant")
match = regexp.match("pants")
```
{{/footnote}}

{{#footnote 3}}
Regular expressions in Python are implemented in the `re` package. You pass
the pattern as a string to functions like `re.compile()` and `re.search()`. As
we'll see later in this course, patterns often include characters such as
backslash (`\`) which have special meaning in string literals. In Python, you
turn off this special meaning by prefixing the literal with a lowercase `r`
(making it a *raw* string). So, in the following examples, `r'ant'` is
simply the string `a`-`n`-`t`. The `re` package converts this string into a
meaningful regexp.

```python
import re

# create a regexp from a pattern, and then
# match that pattern against a string
regexp = re.compile(r'ant')
print regexp.search("pants")   # => Match object

# or use the shortcut form...
print re.search(r'ant', "pants")
regexp = Regexp.new("ant")
match = regexp.match("pants")
```
{{/footnote}}

## Some Real World Examples

Remember that we said that a regular expression is a pattern, and we represent
that pattern using the characters available on our keyboard. So let's see how
that works in practice.

The most common way to create a regular expression in Ruby is using a regexp
literal. At its simplest, a regexp literal is a pattern wrapped in two forward
slash characters (`/`). So, the Ruby syntax for a regexp that matches the
characters c, a, and t is `/cat/`. The canine equivalent would be `/dog/`.

The normal way to match a regexp to a string is to use the `=~` operator. It
takes a regexp on one side and a string on the other (which comes first is up
to you). If the pattern matches the string, `=~` returns the character offset
of the match in the string (starting at zero). If it doesn't match, `=~`
returns `nil`.

```ruby
farm = "otters, cats, ocelots, dogs, and wildebeast"

p /cat/ =~ farm      # => 8

p /dog/ =~ farm      # => 23
p farm =~ /dog/      # => 23

p /monkey/ =~ farm   # => nil
```

These return values are convenient, because a `nil` is equivalent to `false`
when used in a boolean context, and any integer offset returned if the pattern
matches is equivalent to `true`.

```ruby
farm = "otters, cats, ocelots, dogs, and wildebeast"

if farm =~ /wild/
puts "There's something wild in the farm"
end

if farm =~ /elephant/
puts "Better get lots of food"
end
```

## Review

Let's quickly check that you know how to create and use regexps in Ruby.

{{#quiz-choose-many}}
What does the following code display?

```ruby
p /ant/ =~ "Elephant"
```
---
- text: 5
  accept: true
  error: Remember, the offset starts at zero
- text: 6
  error: Remember to count from zero, not one
- text: nil
{{/quiz-choose-many}}

{{#quiz-choose-many}}
What does the following code display?

```ruby
p "Elephant" =~ /ant/
```
---
- text: 5
  accept: true
- text: 6
- text: nil
{{/quiz-choose-many}}

{{#quiz-choose-many}}
What does the following code display?

```ruby
p /Elephant/ =~ "ant"
```
---
- text: 5
- text: 6
- text: nil
  accept: true
{{/quiz-choose-many}}

{{#quiz-input}}
```python
animal = "Bush kangaroo"
if re.search(r'kangaroo', animal):
  print "Skippy"
else:
  print "Boring"
```
---
- text: What does the above code output?
  accept: Skippy
{{/quiz-input}}